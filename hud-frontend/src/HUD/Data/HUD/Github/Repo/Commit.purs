-- File auto generated by purescript-bridge! --
module HUD.Data.HUD.Github.Repo.Commit


where
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Generic.Aeson as Aeson


import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import HUD.Data.HUD.Github.Common (Account)
import HUD.Data.HUD.Github.User (AvatarURL)
import Prim (Int, String)

import Prelude
import Data.Generic (class Generic)

newtype CommitStats =
    CommitStats {
      cmsAdditions :: Int
    , cmsDeletions :: Int
    , cmsTotal :: Int
    }

derive instance genericCommitStats :: Generic CommitStats

derive instance newtypeCommitStats :: Newtype CommitStats _


--------------------------------------------------------------------------------
_CommitStats :: Iso' CommitStats { cmsAdditions :: Int, cmsDeletions :: Int, cmsTotal :: Int}
_CommitStats = _Newtype

cmsAdditions :: Lens' CommitStats Int
cmsAdditions = _Newtype <<< prop (SProxy :: SProxy "cmsAdditions")

cmsDeletions :: Lens' CommitStats Int
cmsDeletions = _Newtype <<< prop (SProxy :: SProxy "cmsDeletions")

cmsTotal :: Lens' CommitStats Int
cmsTotal = _Newtype <<< prop (SProxy :: SProxy "cmsTotal")

--------------------------------------------------------------------------------
newtype CommitSHA =
    CommitSHA {
      unCommitSHA :: String
    }

derive instance genericCommitSHA :: Generic CommitSHA

derive instance newtypeCommitSHA :: Newtype CommitSHA _


--------------------------------------------------------------------------------
_CommitSHA :: Iso' CommitSHA { unCommitSHA :: String}
_CommitSHA = _Newtype

unCommitSHA :: Lens' CommitSHA String
unCommitSHA = _Newtype <<< prop (SProxy :: SProxy "unCommitSHA")

--------------------------------------------------------------------------------
newtype Commit =
    Commit {
      cmSHA :: CommitSHA
    , cmURL :: String
    , cmCommitter :: Maybe (Tuple Account AvatarURL)
    , cmAuthor :: Maybe (Tuple Account AvatarURL)
    , cmStats :: Maybe CommitStats
    , cmMessage :: String
    }

derive instance genericCommit :: Generic Commit

derive instance newtypeCommit :: Newtype Commit _


--------------------------------------------------------------------------------
_Commit :: Iso' Commit { cmSHA :: CommitSHA, cmURL :: String, cmCommitter :: Maybe (Tuple Account AvatarURL), cmAuthor :: Maybe (Tuple Account AvatarURL), cmStats :: Maybe CommitStats, cmMessage :: String}
_Commit = _Newtype

cmSHA :: Lens' Commit CommitSHA
cmSHA = _Newtype <<< prop (SProxy :: SProxy "cmSHA")

cmURL :: Lens' Commit String
cmURL = _Newtype <<< prop (SProxy :: SProxy "cmURL")

cmCommitter :: Lens' Commit (Maybe (Tuple Account AvatarURL))
cmCommitter = _Newtype <<< prop (SProxy :: SProxy "cmCommitter")

cmAuthor :: Lens' Commit (Maybe (Tuple Account AvatarURL))
cmAuthor = _Newtype <<< prop (SProxy :: SProxy "cmAuthor")

cmStats :: Lens' Commit (Maybe CommitStats)
cmStats = _Newtype <<< prop (SProxy :: SProxy "cmStats")

cmMessage :: Lens' Commit String
cmMessage = _Newtype <<< prop (SProxy :: SProxy "cmMessage")

--------------------------------------------------------------------------------
instance decodeCommitStats :: DecodeJson CommitStats where
    decodeJson = Aeson.decodeJson
instance encodeCommitStats :: EncodeJson CommitStats where
    encodeJson = Aeson.encodeJson
derive instance eqCommitSHA :: Eq CommitSHA
instance decodeCommitSHA :: DecodeJson CommitSHA where
    decodeJson = Aeson.decodeJson
instance encodeCommitSHA :: EncodeJson CommitSHA where
    encodeJson = Aeson.encodeJson
instance decodeCommit :: DecodeJson Commit where
    decodeJson = Aeson.decodeJson
instance encodeCommit :: EncodeJson Commit where
    encodeJson = Aeson.encodeJson

