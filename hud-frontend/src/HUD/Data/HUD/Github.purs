-- File auto generated by purescript-bridge! --
module HUD.Data.HUD.Github


where
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Generic.Aeson as Aeson


import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import HUD.Data.HUD.Github.Common (Account, PRNum, Repo)
import HUD.Data.HUD.Github.Repo.Comment (Comment, IssueComment)
import HUD.Data.HUD.Github.Repo.Commit (Commit)
import HUD.Data.HUD.Github.Repo.PR (PR)
import Prim (Array)

import Prelude
import Data.Generic (class Generic)

newtype PRDetails =
    PRDetails {
      prdPR :: PR
    , prdCommits :: Array Commit
    , prdComments :: Array Comment
    , prdIssueComments :: Array IssueComment
    }

derive instance genericPRDetails :: Generic PRDetails

derive instance newtypePRDetails :: Newtype PRDetails _


--------------------------------------------------------------------------------
_PRDetails :: Iso' PRDetails { prdPR :: PR, prdCommits :: Array Commit, prdComments :: Array Comment, prdIssueComments :: Array IssueComment}
_PRDetails = _Newtype

prdPR :: Lens' PRDetails PR
prdPR = _Newtype <<< prop (SProxy :: SProxy "prdPR")

prdCommits :: Lens' PRDetails (Array Commit)
prdCommits = _Newtype <<< prop (SProxy :: SProxy "prdCommits")

prdComments :: Lens' PRDetails (Array Comment)
prdComments = _Newtype <<< prop (SProxy :: SProxy "prdComments")

prdIssueComments :: Lens' PRDetails (Array IssueComment)
prdIssueComments = _Newtype <<< prop (SProxy :: SProxy "prdIssueComments")

--------------------------------------------------------------------------------
data GithubHUDRsp =
    GHHRSFailure
  | GHHRSRepoPRs (Array PR)
  | GHHRSRepoPR PRDetails

derive instance genericGithubHUDRsp :: Generic GithubHUDRsp


--------------------------------------------------------------------------------
_GHHRSFailure :: Prism' GithubHUDRsp Unit
_GHHRSFailure = prism' (\_ -> GHHRSFailure) f
  where
    f GHHRSFailure = Just unit
    f _ = Nothing

_GHHRSRepoPRs :: Prism' GithubHUDRsp (Array PR)
_GHHRSRepoPRs = prism' GHHRSRepoPRs f
  where
    f (GHHRSRepoPRs a) = Just $ a
    f _ = Nothing

_GHHRSRepoPR :: Prism' GithubHUDRsp PRDetails
_GHHRSRepoPR = prism' GHHRSRepoPR f
  where
    f (GHHRSRepoPR a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
data GithubHUDReq =
    GHHRQRepoPRs Account Repo
  | GHHRQRepoPR Account Repo PRNum

derive instance genericGithubHUDReq :: Generic GithubHUDReq


--------------------------------------------------------------------------------
_GHHRQRepoPRs :: Prism' GithubHUDReq { a :: Account, b :: Repo }
_GHHRQRepoPRs = prism' (\{ a, b } -> GHHRQRepoPRs a b) f
  where
    f (GHHRQRepoPRs a b) = Just $ { a: a, b: b }
    f _ = Nothing

_GHHRQRepoPR :: Prism' GithubHUDReq { a :: Account, b :: Repo, c :: PRNum }
_GHHRQRepoPR = prism' (\{ a, b, c } -> GHHRQRepoPR a b c) f
  where
    f (GHHRQRepoPR a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

--------------------------------------------------------------------------------
instance decodePRDetails :: DecodeJson PRDetails where
    decodeJson = Aeson.decodeJson
instance encodePRDetails :: EncodeJson PRDetails where
    encodeJson = Aeson.encodeJson
instance decodeGithubHUDRsp :: DecodeJson GithubHUDRsp where
    decodeJson = Aeson.decodeJson
instance encodeGithubHUDRsp :: EncodeJson GithubHUDRsp where
    encodeJson = Aeson.encodeJson
instance decodeGithubHUDReq :: DecodeJson GithubHUDReq where
    decodeJson = Aeson.decodeJson
instance encodeGithubHUDReq :: EncodeJson GithubHUDReq where
    encodeJson = Aeson.encodeJson

