-- File auto generated by purescript-bridge! --
module HUD.Data.HUD.Github


where
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Generic.Aeson as Aeson


import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Data.Tuple (Tuple)
import HUD.Data.HUD.Github.Common (Account, PRNum, Repo)
import HUD.Data.HUD.Github.Repo.Comment (Comment, IssueComment)
import HUD.Data.HUD.Github.Repo.Commit (Commit)
import HUD.Data.HUD.Github.Repo.PR (PR)
import Prim (Array)

import Prelude
import Data.Generic (class Generic)

newtype PRDetails =
    PRDetails {
      prdPR :: PR
    , prdCommits :: Array Commit
    , prdComments :: Array Comment
    , prdIssueComments :: Array IssueComment
    }

derive instance genericPRDetails :: Generic PRDetails

derive instance newtypePRDetails :: Newtype PRDetails _


--------------------------------------------------------------------------------
_PRDetails :: Iso' PRDetails { prdPR :: PR, prdCommits :: Array Commit, prdComments :: Array Comment, prdIssueComments :: Array IssueComment}
_PRDetails = _Newtype

prdPR :: Lens' PRDetails PR
prdPR = _Newtype <<< prop (SProxy :: SProxy "prdPR")

prdCommits :: Lens' PRDetails (Array Commit)
prdCommits = _Newtype <<< prop (SProxy :: SProxy "prdCommits")

prdComments :: Lens' PRDetails (Array Comment)
prdComments = _Newtype <<< prop (SProxy :: SProxy "prdComments")

prdIssueComments :: Lens' PRDetails (Array IssueComment)
prdIssueComments = _Newtype <<< prop (SProxy :: SProxy "prdIssueComments")

--------------------------------------------------------------------------------
data GithubRsp =
    GHRSFailure
  | GHRSRepos (Array (Tuple Account Repo))
  | GHRSRepoPRs (Array PR)
  | GHRSRepoPR PRDetails

derive instance genericGithubRsp :: Generic GithubRsp


--------------------------------------------------------------------------------
_GHRSFailure :: Prism' GithubRsp Unit
_GHRSFailure = prism' (\_ -> GHRSFailure) f
  where
    f GHRSFailure = Just unit
    f _ = Nothing

_GHRSRepos :: Prism' GithubRsp (Array (Tuple Account Repo))
_GHRSRepos = prism' GHRSRepos f
  where
    f (GHRSRepos a) = Just $ a
    f _ = Nothing

_GHRSRepoPRs :: Prism' GithubRsp (Array PR)
_GHRSRepoPRs = prism' GHRSRepoPRs f
  where
    f (GHRSRepoPRs a) = Just $ a
    f _ = Nothing

_GHRSRepoPR :: Prism' GithubRsp PRDetails
_GHRSRepoPR = prism' GHRSRepoPR f
  where
    f (GHRSRepoPR a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
data GithubReq =
    GHRQRepos
  | GHRQRepoPRs Account Repo
  | GHRQRepoPR Account Repo PRNum

derive instance genericGithubReq :: Generic GithubReq


--------------------------------------------------------------------------------
_GHRQRepos :: Prism' GithubReq Unit
_GHRQRepos = prism' (\_ -> GHRQRepos) f
  where
    f GHRQRepos = Just unit
    f _ = Nothing

_GHRQRepoPRs :: Prism' GithubReq { a :: Account, b :: Repo }
_GHRQRepoPRs = prism' (\{ a, b } -> GHRQRepoPRs a b) f
  where
    f (GHRQRepoPRs a b) = Just $ { a: a, b: b }
    f _ = Nothing

_GHRQRepoPR :: Prism' GithubReq { a :: Account, b :: Repo, c :: PRNum }
_GHRQRepoPR = prism' (\{ a, b, c } -> GHRQRepoPR a b c) f
  where
    f (GHRQRepoPR a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

--------------------------------------------------------------------------------
instance decodePRDetails :: DecodeJson PRDetails where
    decodeJson = Aeson.decodeJson
instance encodePRDetails :: EncodeJson PRDetails where
    encodeJson = Aeson.encodeJson
instance decodeGithubRsp :: DecodeJson GithubRsp where
    decodeJson = Aeson.decodeJson
instance encodeGithubRsp :: EncodeJson GithubRsp where
    encodeJson = Aeson.encodeJson
instance decodeGithubReq :: DecodeJson GithubReq where
    decodeJson = Aeson.decodeJson
instance encodeGithubReq :: EncodeJson GithubReq where
    encodeJson = Aeson.encodeJson

