-- File auto generated by purescript-bridge! --
module HUD.Data.HUD.Github


where
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Generic.Aeson as Aeson


import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import HUD.Data.HUD.Github.Common (Account, PRNum, Repo)
import HUD.Data.HUD.Github.Repo.Comment (Comment, IssueComment)
import HUD.Data.HUD.Github.Repo.Commit (Commit)
import HUD.Data.HUD.Github.Repo.PR (PR)
import Prim (Array)

import Prelude
import Data.Generic (class Generic)

newtype PRDetails =
    PRDetails {
      prdPR :: PR
    , prdCommits :: Array Commit
    , prdComments :: Array Comment
    , prdIssueComments :: Array IssueComment
    }

derive instance genericPRDetails :: Generic PRDetails

derive instance newtypePRDetails :: Newtype PRDetails _


--------------------------------------------------------------------------------
_PRDetails :: Iso' PRDetails { prdPR :: PR, prdCommits :: Array Commit, prdComments :: Array Comment, prdIssueComments :: Array IssueComment}
_PRDetails = _Newtype

prdPR :: Lens' PRDetails PR
prdPR = _Newtype <<< prop (SProxy :: SProxy "prdPR")

prdCommits :: Lens' PRDetails (Array Commit)
prdCommits = _Newtype <<< prop (SProxy :: SProxy "prdCommits")

prdComments :: Lens' PRDetails (Array Comment)
prdComments = _Newtype <<< prop (SProxy :: SProxy "prdComments")

prdIssueComments :: Lens' PRDetails (Array IssueComment)
prdIssueComments = _Newtype <<< prop (SProxy :: SProxy "prdIssueComments")

--------------------------------------------------------------------------------
data HUDRsp =
    HRSFailure
  | HRSRepoPRs (Array PR)
  | HRSRepoPR PRDetails

derive instance genericHUDRsp :: Generic HUDRsp


--------------------------------------------------------------------------------
_HRSFailure :: Prism' HUDRsp Unit
_HRSFailure = prism' (\_ -> HRSFailure) f
  where
    f HRSFailure = Just unit
    f _ = Nothing

_HRSRepoPRs :: Prism' HUDRsp (Array PR)
_HRSRepoPRs = prism' HRSRepoPRs f
  where
    f (HRSRepoPRs a) = Just $ a
    f _ = Nothing

_HRSRepoPR :: Prism' HUDRsp PRDetails
_HRSRepoPR = prism' HRSRepoPR f
  where
    f (HRSRepoPR a) = Just $ a
    f _ = Nothing

--------------------------------------------------------------------------------
data HUDReq =
    HRQRepoPRs Account Repo
  | HRQRepoPR Account Repo PRNum

derive instance genericHUDReq :: Generic HUDReq


--------------------------------------------------------------------------------
_HRQRepoPRs :: Prism' HUDReq { a :: Account, b :: Repo }
_HRQRepoPRs = prism' (\{ a, b } -> HRQRepoPRs a b) f
  where
    f (HRQRepoPRs a b) = Just $ { a: a, b: b }
    f _ = Nothing

_HRQRepoPR :: Prism' HUDReq { a :: Account, b :: Repo, c :: PRNum }
_HRQRepoPR = prism' (\{ a, b, c } -> HRQRepoPR a b c) f
  where
    f (HRQRepoPR a b c) = Just $ { a: a, b: b, c: c }
    f _ = Nothing

--------------------------------------------------------------------------------
instance decodePRDetails :: DecodeJson PRDetails where
    decodeJson = Aeson.decodeJson
instance encodePRDetails :: EncodeJson PRDetails where
    encodeJson = Aeson.encodeJson
instance decodeHUDRsp :: DecodeJson HUDRsp where
    decodeJson = Aeson.decodeJson
instance encodeHUDRsp :: EncodeJson HUDRsp where
    encodeJson = Aeson.encodeJson
instance decodeHUDReq :: DecodeJson HUDReq where
    decodeJson = Aeson.decodeJson
instance encodeHUDReq :: EncodeJson HUDReq where
    encodeJson = Aeson.encodeJson

