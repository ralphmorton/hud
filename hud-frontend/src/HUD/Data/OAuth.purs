-- File auto generated by purescript-bridge! --
module HUD.Data.OAuth


where
import Data.Argonaut.Decode (class DecodeJson, decodeJson)
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Generic.Aeson as Aeson


import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (String)

import Prelude
import Data.Generic (class Generic)

data OAuthResult a =
    ORSuccess (OAuthToken a)
  | ORFailure

derive instance genericOAuthResult :: Generic a => Generic (OAuthResult a)


--------------------------------------------------------------------------------
_ORSuccess :: forall a. Prism' (OAuthResult a) (OAuthToken a)
_ORSuccess = prism' ORSuccess f
  where
    f (ORSuccess a) = Just $ a
    f _ = Nothing

_ORFailure :: forall a. Prism' (OAuthResult a) Unit
_ORFailure = prism' (\_ -> ORFailure) f
  where
    f ORFailure = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
newtype OAuthCode a =
    OAuthCode {
      unOAuthCode :: String
    }

derive instance genericOAuthCode :: Generic (OAuthCode a)

derive instance newtypeOAuthCode :: Newtype (OAuthCode a) _


--------------------------------------------------------------------------------
_OAuthCode :: forall a. Iso' (OAuthCode a) { unOAuthCode :: String}
_OAuthCode = _Newtype

unOAuthCode :: forall a. Lens' (OAuthCode a) String
unOAuthCode = _Newtype <<< prop (SProxy :: SProxy "unOAuthCode")

--------------------------------------------------------------------------------
instance decodeOAuthResult :: (Generic a) => DecodeJson (OAuthResult a) where
    decodeJson = Aeson.decodeJson
instance encodeOAuthResult :: (Generic a) => EncodeJson (OAuthResult a) where
    encodeJson = Aeson.encodeJson
derive instance eqOAuthCode :: (Eq a) => Eq (OAuthCode a)
instance decodeOAuthCode :: (Generic a) => DecodeJson (OAuthCode a) where
    decodeJson = Aeson.decodeJson
instance encodeOAuthCode :: (Generic a) => EncodeJson (OAuthCode a) where
    encodeJson = Aeson.encodeJson

